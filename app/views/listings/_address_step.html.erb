<div class="form-container">
  <div class="form-group">
    <%= f.label :address_line_one %>
    <%= f.text_field :address_line_one, id: "autocomplete", class: "form-control", placeholder: "Enter your address", 
          onFocus: "geolocate()"   %>
  </div>

  <div class="form-group">
    <%= f.label :address_line_two %>
    <%= f.text_field :address_line_two, id: 'sublocality_level_1', class: "form-control"  %>
  </div>

  <div class="form-group">
    <%= f.label :city %>
    <%= f.text_field :city, id: 'locality', class: "form-control"  %>
  </div>

  <div class="form-group">
    <%= f.label :state %>
    <%= f.text_field :state, id: 'administrative_area_level_1', class: "form-control"  %>
  </div>

  <div class="form-group">
    <%= f.label :country %>
    <%= f.text_field :country,id: 'country', class: "form-control"  %>
  </div>
  
      <%= f.hidden_field :latitude, id: 'latitude' %>
      <%= f.hidden_field :longitude, id: 'longitude' %>
   <div class="form-group">
    <%= f.label :zipcode %>
    <%= f.text_field :zipcode, id: 'postal_code', class: "form-control"  %>
  </div>

  <div class="form-group">
    <%#= f.label :timezone %>
    <%#= f.text_field :timezone, id: :listing_timezone, class: "form-control"  %>
  </div>
</div>  
<script>
  var placeSearch, autocomplete;

  var componentForm = {
    sublocality_level_1: 'long_name',
    locality: 'long_name',
    administrative_area_level_1: 'short_name',
    country: 'long_name',
    postal_code: 'short_name'
  };

  function initAutocomplete() {
    // Create the autocomplete object, restricting the search predictions to
    // geographical location types.
    autocomplete = new google.maps.places.Autocomplete(
        document.getElementById('autocomplete'), {types: ['geocode']});

    // Avoid paying for data that you don't need by restricting the set of
    // place fields that are returned to just the address components.
    autocomplete.setFields(['address_component']);

    // When the user selects an address from the drop-down, populate the
    // address fields in the form.
    autocomplete.addListener('place_changed', fillInAddress);
  }

  function fillInAddress() {
    // Get the place details from the autocomplete object.
    var place = autocomplete.getPlace();
    

    // console.log(place);
    for (var component in componentForm) {
      document.getElementById(component).value = '';
      document.getElementById(component).disabled = false;
    }

    // Get each component of the address from the place details,
    // and then fill-in the corresponding field on the form.
    for (var i = 0; i < place.address_components.length; i++) {
      var addressType = place.address_components[i].types[0];
      if (componentForm[addressType]) {
        var val = place.address_components[i][componentForm[addressType]];
        document.getElementById(addressType).value = val;
      }
    }
  }

  // Bias the autocomplete object to the user's geographical location,
  // as supplied by the browser's 'navigator.geolocation' object.
  function geolocate() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function(position) {
        var geolocation = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };
        console.log(geolocation);

        var circle = new google.maps.Circle(
            {center: geolocation, radius: position.coords.accuracy});
        autocomplete.setBounds(circle.getBounds());
      });
    }
  }

        
</script>



<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCg7AsTz1QbPyNw6h6yg0_phr4P2UMp5dc&libraries=places&callback=initAutocomplete" async defer></script>